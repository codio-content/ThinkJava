workspace:
  directory: ThinkJava2
  tex: thinkjava.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
  - code
  - figs: "*.png"
  - figs: "*.jpg"
  - trinket
sections:
  - name: Preface
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The philosophy behind the book
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Object-oriented programming
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Changes to the 2nd edition
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: About the appendixes
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Using the code examples
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Contributors over the years
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
# Chapter 1
  - name: Computer programming
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: What is a computer?
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: What is programming?
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The hello world program
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
             See the example java code in the top-left pane.
             To compile and run the code, press the "Run!"
             {Run!}(javac code/HelloWorld.java && java code/HelloWorld)
     
          position: 105
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello.java"
          panel: 0
          action: open
  - name: Compiling Java programs
    type: section
    transformations:
        - add: Try it out by typing `javac code/HelloWorld.java` into the terminal in the bottom-left pane and pressing Enter.
          position: 251
        - add: Try it out by typing `java code/HelloWorld` into the terminal in the bottom-left pane and pressing Enter.
          position: 264
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
  - name: Displaying two messages
    type: section
    transformations:
        - remove: 1
          position: 273
        - add: |
               For example, take a look at Hello2.java in the top-left pane which displays more than one line of output.
               To compile and run the code, press the "Run!"
               {Run!}(javac code/Hello2.java && java code/Hello2)
       
          position: 274
        - remove: 1
          position: 301
        - add: |
               For example, take a look at Goodbye.java in the bottom-left pane which uses `print` instead of `println` to avoid the newling at the end.
               To compile and run the code, press the "Run!"
               {Run!}(javac code/Goodbye.java && java code/Goodbye)
       
          position: 302
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello2.java"
          panel: 0
          action: open
        - path: "code/Goodbye.java"
          panel: 1
          action: open
  - name: Formatting source code
    type: section
    transformations:
        - remove: 1
          position: 338
        - add: |
               For example, the program in the top-left pane, `Goodbye2.java` *is* legal.
               To compile and run the code, press the "Run!"
               {Run!}(javac code/Goodbye2.java && java code/Goodbye2)
    
          position: 339
        - remove: 1
          position: 350
        - add: |
               For example, we could write the same program like the example `Goodbye3.java` in the bottom-left pane.
               To compile and run the code, press the "Run!"
               {Run!}(javac code/Goodbye3.java && java code/Goodbye3)
    
          position: 351
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Goodbye2.java"
            panel: 0
            action: open
          - path: "code/Goodbye3.java"
            panel: 1
            action: open
  - name: Escape sequences
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(javac code/Hello3.java && java code/Hello3)
     
          position: 395
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello3.java"
          panel: 0
          action: open
  - name: What is computer science?
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Debugging programs
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Vocabulary
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 68
        position: 655
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 2
  - name: Variables and operators
    type: chapter
  - name: Declaring variables
    type: section
  - name: Assigning variables
    type: section
  - name: Memory diagrams
    type: section
  - name: Printing variables
    type: section
  - name: Arithmetic operators
    type: section
  - name: Floating-point numbers
    type: section
  - name: Rounding errors
    type: section
  - name: Operators for strings
    type: section
  - name: Compiler error messages
    type: section
  - name: Other types of errors
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
#Chapter 3
  - name: Input and output
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The System class
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The Scanner class
    type: section
    transformations:
        - remove: 1
          position: 106
        - add:  |
             
             See the example java code in the top-left panel. This example reads two lines and repeats them back to the user.
             To compile and run the code, press the "Run!"
             {Run!}(javac code/Echo.java && java code/Echo)
     
          position: 108
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Echo.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: Language elements
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Literals and constants
    type: section
    transformations:
        - add:  |
             
             Follow along in the top-left panel.
             To compile and run the code, press the "Run!"
             {Run!}(javac code/Literals.java && java code/Literals)
     
          position: 196
        - add:  |
             
             {Run!}(javac code/Literals.java && java code/Literals)
     
          position: 216
        - add:  |
             
             {Run!}(javac code/Literals.java && java code/Literals)
     
          position: 225
        - add:  |
             
             {Run!}(javac code/Literals.java && java code/Literals)
     
          position: 250
        - add:  |
             
             {Run!}(javac code/Literals.java && java code/Literals)
     
          position: 262
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Literals.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: Formatting output
    type: section
    transformations:
        - add:  |
             
             Try it out in the top-left panel.
             To compile and run the code, press the "Run!"
             {Run!}(javac code/Formatting.java && java code/Formatting)
     
          position: 276
        - add:  |
             
             Try it out in the top-left panel.
             {Run!}(javac code/Formatting.java && java code/Formatting)
     
          position: 300
        - add:  |
             
             Try it out in the top-left panel.
             {Run!}(javac code/Formatting.java && java code/Formatting)
     
          position: 314
    configuration:
      layout: 3-cell-left
      files:
          - path: "#tabs"
            action: close
          - path: "code/Formatting.java"
            panel: 1
            action: open
          - path: "#terminal: "
            panel: 2
            action: open
  - name: Type cast operators
    type: section
    transformations:
        - add:  |
             
             Try it out in the top-left panel.
             To compile and run the code, press the "Run!"
             {Run!}(javac code/Casting.java && java code/Casting)
     
          position: 411
        - add:  |
             
             Try it out in the top-left panel.
             {Run!}(javac code/Casting.java && java code/Casting)
     
          position: 437
        - add:  |
             
             Try it out in the top-left panel.
             {Run!}(javac code/Casting.java && java code/Casting)
     
          position: 446
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/Casting.java"
            panel: 1
            action: open
  - name: Remainder operator
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Putting it all together
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The Scanner bug
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Vocabulary
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercises
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 4
  - name: Methods and testing
    type: chapter
  - name: Math methods
    type: section
  - name: Composition
    type: section
  - name: Defining new methods
    type: section
  - name: Flow of execution
    type: section
  - name: Parameters and arguments
    type: section
  - name: Multiple parameters
    type: section
  - name: Stack diagrams
    type: section
  - name: Return values
    type: section
  - name: Incremental development
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Conditionals and logic
    type: chapter
  - name: Relational operators
    type: section
  - name: The if-else statement
    type: section
  - name: Chaining and nesting
    type: section
  - name: Logical operators
    type: section
  - name: De Morgan's laws
    type: section
  - name: Boolean variables
    type: section
  - name: Boolean methods
    type: section
  - name: Validating input
    type: section
  - name: Example program
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Loops and strings
    type: chapter
  - name: The while statement
    type: section
  - name: Increment and decrement
    type: section
  - name: The for statement
    type: section
  - name: Nested loops
    type: section
  - name: Characters
    type: section
  - name: String iteration
    type: section
  - name: The indexOf method
    type: section
  - name: String comparison
    type: section
  - name: Substrings
    type: section
  - name: String formatting
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Arrays and references
    type: chapter
  - name: Creating arrays
    type: section
  - name: Accessing elements
    type: section
  - name: Displaying arrays
    type: section
  - name: Copying arrays
    type: section
  - name: Array traversal
    type: section
  - name: Random numbers
    type: section
  - name: Building a histogram
    type: section
  - name: The enhanced for loop
    type: section
  - name: Counting characters
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Recursive methods
    type: chapter
  - name: Recursive void methods
    type: section
  - name: Recursive stack diagrams
    type: section
  - name: Value returning methods
    type: section
  - name: The leap of faith
    type: section
  - name: Binary number system
    type: section
  - name: Recursive binary method
    type: section
  - name: CodingBat problems
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Immutable objects
    type: chapter
  - name: Primitives vs objects
    type: section
  - name: Strings are immutable
    type: section
  - name: Wrapper classes
    type: section
  - name: Command-line arguments
    type: section
  - name: BigInteger arithmetic
    type: section
  - name: Program development
    type: section
  - name: More generalization
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Mutable objects
    type: chapter
  - name: Point objects
    type: section
  - name: Objects as parameters
    type: section
  - name: Objects as return types
    type: section
  - name: Rectangles are mutable
    type: section
  - name: Aliasing revisited
    type: section
  - name: Java library source
    type: section
  - name: Class diagrams
    type: section
  - name: Garbage collection
    type: section
  - name: Mutable vs immutable
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Designing classes
    type: chapter
  - name: The Time class
    type: section
  - name: Constructors
    type: section
  - name: More constructors
    type: section
  - name: Getters and setters
    type: section
  - name: Displaying objects
    type: section
  - name: The toString method
    type: section
  - name: The equals method
    type: section
  - name: Adding times
    type: section
  - name: Pure methods
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Arrays of objects
    type: chapter
  - name: Card objects
    type: section
  - name: Card toString
    type: section
  - name: Class variables
    type: section
  - name: The compareTo method
    type: section
  - name: Cards are immutable
    type: section
  - name: Arrays of cards
    type: section
  - name: Sequential search
    type: section
  - name: Binary search
    type: section
  - name: Tracing the code
    type: section
  - name: Recursive version
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Objects of arrays
    type: chapter
  - name: Decks of cards
    type: section
  - name: Shuffling decks
    type: section
  - name: Selection sort
    type: section
  - name: Merge sort
    type: section
  - name: Subdecks
    type: section
  - name: Merging decks
    type: section
  - name: Adding recursion
    type: section
  - name: Static context
    type: section
  - name: Piles of cards
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Extending classes
    type: chapter
  - name: CardCollection
    type: section
  - name: Inheritance
    type: section
  - name: Dealing cards
    type: section
  - name: The Player class
    type: section
  - name: The Eights class
    type: section
  - name: Class relationships
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Tools
    type: chapter
  - name: Installing DrJava
    type: section
  - name: DrJava interactions
    type: section
  - name: Command-line interface
    type: section
  - name: Command-line testing
    type: section
  - name: Running Checkstyle
    type: section
  - name: Tracing with a debugger
    type: section
  - name: Testing with JUnit
    type: section
  - name: Vocabulary
    type: section
  - name: Javadoc
    type: chapter
  - name: Reading documentation
    type: section
  - name: Writing documentation
    type: section
  - name: Javadoc tags
    type: section
  - name: Example source file
    type: section
  - name: Vocabulary
    type: section
  - name: Graphics
    type: chapter
  - name: Creating graphics
    type: section
  - name: Graphics methods
    type: section
  - name: Example drawing
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
  - name: Debugging
    type: chapter
  - name: Compile-time errors
    type: section
  - name: Run-time errors
    type: section
  - name: Logic errors
    type: section
  - name: Extras
    type: chapter
  - name: Unreachable code
    type: section
  - name: Method composition
    type: section
  - name: Overloading methods
    type: section
  - name: Generating tables
    type: section
  - name: The do-while loop
    type: section
  - name: Break and continue
    type: section
#inserting exercises on seperate pages so that they are cherry-pick-able
insert_sections:
  - name: Exercises 1.1
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex1.1
      Computer scientists have the annoying habit of using common English words to mean something other than their common English meaning.
      For example, in English, statements and comments are the same thing, but in programs they are different.
      \begin{enumerate}
      \item In computer jargon, what's the difference between a statement and a comment?
      \item What does it mean to say that a program is portable?
      \item In common English, what does the word compile mean?
      \item What is an executable? Why is that word used as a noun?
      \end{enumerate}
      The glossary at the end of each chapter is intended to highlight words and phrases that have special meanings in computer science.
      When you see familiar words, don't assume that you know what they mean!
      \end{exercise}
  - name: Exercises 1.2
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex1.2
      Before you do anything else, find out how to compile and run a Java program.
      Some environments provide sample programs similar to the example in Section~\ref{hello}.
      \begin{enumerate}
      \item Type in the hello world program, then compile and run it.
      \item Add a print statement that displays a second message after the ``Hello, World!''.
      Say something witty like, ``How are you?''
      Compile and run the program again.
      \item Add a comment to the program (anywhere), recompile, and run it again.
      The new comment should not affect the result.
      \end{enumerate}
      This exercise may seem trivial, but it is the starting place for many of the programs we will work with.
      To debug with confidence, you will need to have confidence in your programming environment.
      In some environments, it is easy to lose track of which program is executing.
      You might find yourself trying to debug one program while you are accidentally running another.
      Adding (and changing) print statements is a simple way to be sure that the program you are looking at is the program you are running.
      \end{exercise}
  - name: Exercises 1.3
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex1.3
      It is a good idea to commit as many errors as you can think of, so that you see what error messages the compiler produces.
      Sometimes the compiler tells you exactly what is wrong, and all you have to do is fix it.
      But sometimes the error messages are misleading.
      Over time you will develop a sense for when you can trust the compiler and when you have to figure things out yourself.
      Starting with the hello world program, try out each of the following errors.
      After you make each change, compile the program, read the error message (if there is one), and then fix the error.
      \begin{enumerate}
      \item Remove one of the open curly braces.
      \item Remove one of the close curly braces.
      \item Instead of \java{main}, write \java{mian}.
      \item Remove the word \java{static}.
      \item Remove the word \java{public}.
      \item Remove the word \java{System}.
      \item Replace \java{println} with \java{Println}.
      \item Replace \java{println} with \java{print}.
      \item Delete one of the parentheses.
      \item Add an extra parenthesis.
      \end{enumerate}
      \end{exercise}