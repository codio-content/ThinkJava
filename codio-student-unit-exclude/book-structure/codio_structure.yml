workspace:
  directory: ThinkJava2
  tex: thinkjava.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
  - code
  - figs: "*.png"
  - figs: "*.jpg"
  - trinket
sections:
  - name: Preface
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The philosophy behind the book
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Object-oriented programming
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Changes to the 2nd edition
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: About the appendixes
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Using the code examples
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Contributors over the years
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
# Chapter 1
  - name: Computer programming
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: What is a computer?
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: What is programming?
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The hello world program
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
             See the example java code in the top-left pane.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Hello.java java -cp code/ Hello )
     
          position: 105
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello.java"
          panel: 0
          action: open
  - name: Compiling Java programs
    type: section
    transformations:
        - add: Try it out by typing `javac code/HelloWorld.java` into the terminal in the bottom-left pane and pressing Enter.
          position: 251
        - add: Try it out by typing `java code/HelloWorld` into the terminal in the bottom-left pane and pressing Enter.
          position: 264
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
  - name: Displaying two messages
    type: section
    transformations:
        - remove: 1
          position: 273
        - add: |
               For example, take a look at Hello2.java in the top-left pane which displays more than one line of output.
               To compile and run the code, press the "Run!"
               {Run!}(sh .guides/bg.sh javac code/Hello2.java java -cp code/ Hello2 )
       
          position: 274
        - remove: 1
          position: 301
        - add: |
               For example, take a look at Goodbye.java in the bottom-left pane which uses `print` instead of `println` to avoid the newling at the end.
               To compile and run the code, press the "Run!"
               {Run!}(sh .guides/bg.sh javac code/Goodbye.java java -cp code/ Goodbye )
       
          position: 302
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello2.java"
          panel: 0
          action: open
        - path: "code/Goodbye.java"
          panel: 1
          action: open
  - name: Formatting source code
    type: section
    transformations:
        - remove: 1
          position: 338
        - add: |
               For example, the program in the top-left pane, `Goodbye2.java` *is* legal.
               To compile and run the code, press the "Run!"
               {Run!}(sh .guides/bg.sh javac code/Goodbye2.java java -cp code/ Goodbye2 )
    
          position: 339
        - remove: 1
          position: 350
        - add: |
               For example, we could write the same program like the example `Goodbye3.java` in the bottom-left pane.
               To compile and run the code, press the "Run!"
               {Run!}(sh .guides/bg.sh javac code/Goodbye3.java java -cp code/ Goodbye3 )
    
          position: 351
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Goodbye2.java"
            panel: 0
            action: open
          - path: "code/Goodbye3.java"
            panel: 1
            action: open
  - name: Escape sequences
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Hello3.java java -cp code/ Hello3 )
     
          position: 395
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Hello3.java"
          panel: 0
          action: open
  - name: What is computer science?
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Debugging programs
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Vocabulary
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 68
        position: 655
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 2
  - name: Variables and operators
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Declaring variables
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Assigning variables
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Memory diagrams
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Printing variables
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Printing.java java -cp code/ Printing )
     
          position: 211
          - add:  |
             {Run!}(sh .guides/bg.sh javac code/Printing.java java -cp code/ Printing 2 )
     
          position: 225
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Printing.java"
          panel: 0
          action: open
  - name: Arithmetic operators
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Arithmetic.java java -cp code/ Arithmetic )
     
          position: 278
          - add:  |

             {Run!}(sh .guides/bg.sh javac code/Arithmetic.java java -cp code/ Arithmetic 2 )
     
          position: 308
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Arithmetic.java"
          panel: 0
          action: open
  - name: Floating-point numbers
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Floating.java java -cp code/ Floating )
     
          position: 364
          - add:  |

             {Run!}(sh .guides/bg.sh javac code/Floating.java java -cp code/ Floating 2 )
     
          position: 397
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Floating.java"
          panel: 0
          action: open
  - name: Rounding errors
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Operators for strings
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/StringOps.java java -cp code/ StringOps )
     
          position: 505
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/StringOps.java"
          panel: 0
          action: open
  - name: Compiler error messages
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/1/Hello.java java -cp code/1/ Hello )
     
          position: 575
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/1/Hello.java"
          panel: 0
          action: open
  - name: Other types of errors
    type: section
    transformations:
        - add:  |
             See the example java code in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/2/Hello.java java -cp code/2/ Hello )
     
          position: 666
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/2/Hello.java"
          panel: 0
          action: open
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 80
        position: 770
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 3
  - name: Input and output
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The System class
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The Scanner class
    type: section
    transformations:
        - remove: 1
          position: 106
        - add:  |
             
             See the example java code in the top-left panel. This example reads two lines and repeats them back to the user.
             To compile and run the code, press the "Run!"
             {Run! | terminal}(javac code/Echo.java && java -cp code/ Echo)
     
          position: 108
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Echo.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: Language elements
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Literals and constants
    type: section
    transformations:
        - add:  |
             
             Follow along in the top-left panel.
             To compile and run the code, press the "Run!"
             {Run! | terminal}(javac code/Literals.java && java -cp code/ Literals)
     
          position: 196
        - add:  |
             
             {Run! | terminal}(javac code/Literals.java && java -cp code/ Literals )
     
          position: 216
        - add:  |
             
             {Run! | terminal}(javac code/Literals.java && java -cp code/ Literals )
     
          position: 225
        - add:  |
             
             {Run! | terminal}(javac code/Literals.java && java -cp code/ Literals )
     
          position: 250
        - add:  |
             
             {Run! | terminal}(javac code/Literals.java && java -cp code/ Literals )
     
          position: 262
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Literals.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: Formatting output
    type: section
    transformations:
        - add:  |
             
             Try it out in the top-right panel.
             To compile and run the code, press the "Run!"
             {Run! | terminal}(javac code/Formatting.java && java -cp code/ Formatting)
     
          position: 276
        - add:  |
             
             Try it out in the top-right panel.
             {Run! | terminal}(javac code/Formatting.java && java -cp code/ Formatting )
     
          position: 300
        - add:  |
             
             Try it out in the top-right panel.
             {Run! | terminal}(javac code/Formatting.java && java -cp code/ Formatting )
     
          position: 314
    configuration:
      layout: 3-cell-left
      files:
          - path: "#tabs"
            action: close
          - path: "code/Formatting.java"
            panel: 1
            action: open
          - path: "#terminal: "
            panel: 2
            action: open
  - name: Type cast operators
    type: section
    transformations:
        - add:  |
             
             Try it out in the left panel.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Casting.java java -cp code/ Casting )
     
          position: 411
        - add:  |
             
             Try it out in the left panel.
             {Run!}(sh .guides/bg.sh javac code/Casting.java java -cp code/ Casting 2 )
     
          position: 437
        - add:  |
             
             Try it out in the left panel.
             {Run!}(sh .guides/bg.sh javac code/Casting.java java -cp code/ Casting 3 )
     
          position: 446
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/Casting.java"
            panel: 0
            action: open
  - name: Remainder operator
    type: section
    transformations:
        - add:  |
             
             Try it out in the left panel.
             {Run!}(sh .guides/bg.sh javac code/Remainder.java java -cp code/ Remainder )
     
          position: 471
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/Remainder.java"
            panel: 0
            action: open
  - name: Putting it all together
    type: section
    transformations:
        - remove: 1
          position: 501
        - add:  |
             
             Look at the code in the left panel which puts everything together in a complete program.
             {Run! | terminal}(javac code/Convert.java && java -cp code/ Convert )
     
          position: 502
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Convert.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: The Scanner bug
    type: section
    transformations:
        - add:  |
             
             {Run! | terminal}(javac code/ScannerBug.java && java -cp code/ ScannerBug)
     
          position: 583
        - add:  |
             
             Fix the code on the left and try running it again.
             {Run! | terminal}(javac code/ScannerBug.java && java -cp code/ ScannerBug)
     
          position: 628
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ScannerBug.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: Vocabulary
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 3
        position: 717
      - remove: 99
        position: 724
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 4
  - name: Methods and testing
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Math methods
    type: section
    transformations:
        - add:  |
              
             Try out some of these Math functions in the panel to the left.
             {Run!}(sh .guides/bg.sh javac code/MathFun.java java -cp code/ MathFun )
 
         position: 48
       - add:  |
           
            {Run!}(sh .guides/bg.sh javac code/MathFun.java java -cp code/ MathFun 2 )
 
        position: 65
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MathFun.java"
          panel: 0
          action: open
  - name: Composition
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Defining new methods
    type: section
    transformations:
        - add:  |
             See the example java code in the top-left pane.
             To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/NewLine.java java -cp code/ NewLine )

        position: 162
       - add:  |
             See the example java code in the bottom-left pane.
             To compile and run the code, press the "Run!"
            {Run!}(sh .guides/bg.sh javac code/1/NewLine.java java -cp code/1/ NewLine 2 )
   
        position: 200
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/NewLine.java"
          panel: 0
          action: open
        - path: "code/1/NewLine.java"
          panel: 1
          action: open
  - name: Flow of execution
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Parameters and arguments
    type: section
    transformations:
        - remove: 1
          position: 284
        - add: | 
          
             The class in the top-left pane shows an example.
             {Run!}(sh .guides/bg.sh javac code/PrintTwice.java java -cp code/ PrintTwice )
  
          position: 285
        - remove: 1
          position: 402
        - add: | 
             
             You can see the pulled together code fragments in the bottom-left pane.
             {Run!}(sh .guides/bg.sh javac code/PrintTime.java java -cp code/ PrintTime )
   
          position: 403
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/PrintTwice.java"
          panel: 0
          action: open
        - path: "code/PrintTime.java"
          panel: 1
          action: open
  - name: Stack diagrams
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Return values
    type: section
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Return.java"
          panel: 0
          action: open
        - path: "#visualizer: code/Return.java"
          panel: 1
          action: open
  - name: Incremental development
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 216
        position: 763
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 5
  - name: Conditionals and logic
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Relational operators
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The if-else statement
    type: section
    transformations:
        - add:  |
             Try it out in the panel to the left. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/IfElse.java java -cp code/ IfElse )
  
         position: 82
       - add:  |

            {Run!}(sh .guides/bg.sh javac code/IfElse.java java -cp code/ IfElse 2 )
  
        position: 124
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/IfElse.java"
          panel: 0
          action: open
  - name: Chaining and nesting
    type: section
    transformations:
        - add:  |
             Try it out in the pane to the left. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Chaining.java java -cp code/ Chaining )
  
         position: 187
       - add:  |
            {Run!}(sh .guides/bg.sh javac code/Chaining.java java -cp code/ Chaining 2 )
  
        position: 212
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Chaining.java"
          panel: 0
          action: open
  - name: Logical operators
    type: section
    transformations:
        - add:  |
             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/LogicalOps.java java -cp code/ LogicalOps )
  
         position: 259
       - add:  |
            {Run!}(sh .guides/bg.sh javac code/LogicalOps.java java -cp code/ LogicalOps 2 )
  
        position: 277
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/LogicalOps.java"
          panel: 0
          action: open
  - name: De Morgan's laws
    type: section
    configuration:
            layout: 1-panel
            files:
                - path: "#tabs"
                  action: close
  - name: Boolean variables
    type: section
    transformations:
        - add:  |
             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/BooleanVars.java java -cp code/ BooleanVars )

         position: 364
       - add:  |
            {Run!}(sh .guides/bg.sh javac code/BooleanVars.java java -cp code/ BooleanVars 2 )

        position: 388
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/BooleanVars.java"
          panel: 0
          action: open
  - name: Boolean methods
    type: section
    transformations:
        - add:  |
             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/BooleanMethods.java java -cp code/ BooleanMethods )

         position: 421
       - add:  |
            {Run!}(sh .guides/bg.sh javac code/BooleanMethods.java java -cp code/ BooleanMethods 2 )

        position: 441
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/BooleanMethods.java"
          panel: 0
          action: open
  - name: Validating input
    type: section
    transformations:
        - add: |
          
          Try it out by clicking the button below:
          {Run! | terminal}(javac code/ValidInput.java && java -cp code/ ValidInput)
  
          position: 470
        - add: |
          
          {Run! | terminal}(javac code/ValidInput.java && java -cp code/ ValidInput)
  
          position: 485
        - add: |
          
          {Run! | terminal}(javac code/ValidInput.java && java -cp code/ ValidInput)
  
          position: 515
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/ValidInput.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
  - name: Example program
    type: section
    transformations:
        - remove: 1
          position: 539
        - add: | 

          The program on the left shows how the individual code examples in the last section fit together.
          {Run! | terminal}(javac code/Logarithm.java && java -cp code/ Logarithm)
  
          position: 251
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Logarithm.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 177
        position: 646
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 6
  - name: Loops and strings
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The while statement
    type: section
    transformations:
        - add: {Run!}(sh .guides/bg.sh javac code/BlastOff.java java -cp code/ BlastOff )
          position: 30
        - add: {Run!}(sh .guides/bg.sh javac code/BlastOff.java java -cp code/ BlastOff )
          position: 100
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/BlastOff.java"
          panel: 0
          action: open
        - path: "#visualizer: code/BlastOff.java"
          panel: 1
          action: open
  - name: Increment and decrement
    type: section
    transformations:
        - add:  |
             Try it out using the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Increment.java java -cp code/ Increment )

         position: 130
       - add:  |
            {Run!}(sh .guides/bg.sh javac code/Increment.java java -cp code/ Increment 2 )

        position: 148
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Increment.java"
          panel: 0
          action: open
  - name: The for statement
    type: section
    transformations:
        - add: |
          
          {Run!}(sh .guides/bg.sh javac code/For.java java -cp code/ For )
  
          position: 178
        - add: |
          
          {Run!}(sh .guides/bg.sh javac code/For.java java -cp code/ For )
  
          position: 215
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/For.java"
          panel: 0
          action: open
        - path: "#visualizer: code/For.java"
          panel: 1
          action: open
  - name: Nested loops
    type: section
    transformations:
        - add:  |
             See the example java code in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/MultiplicationTable.java java -cp code/ MultiplicationTable )

         position: 253
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MultiplicationTable.java"
          panel: 0
          action: open
  - name: Characters
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |

             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Characters.java java -cp code/ Characters )
  
         position: 303
       - add:  |
            {Run!}(sh .guides/bg.sh javac code/Characters.java java -cp code/ Characters 2 )
  
        position: 327
      - add:  |

            {Run!}(sh .guides/bg.sh javac code/Characters.java java -cp code/ Characters 3 )
  
        position: 360
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Characters.java"
          panel: 0
          action: open
  - name: String iteration
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/StringIteration.java java -cp code/ StringIteration )
  
         position: 404
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/StringIteration.java"
          panel: 0
          action: open
  - name: The indexOf method
    type: section
    transformations:
        - add:  |
             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/IndexOf.java java -cp code/ IndexOf )
  
         position: 438
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/IndexOf.java"
          panel: 0
          action: open
  - name: String comparison
    type: section
    transformations:
        - add:  |

             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/StringComp.java java -cp code/ StringComp )
  
         position: 497
       - add:  |

            {Run!}(sh .guides/bg.sh javac code/StringComp.java java -cp code/ StringComp 2 )
  
        position: 529
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/StringComp.java"
          panel: 0
          action: open
  - name: Substrings
    type: section
    transformations:
        - add:  |

             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/Substring.java java -cp code/ Substring )
  
         position: 559
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/Substring.java"
          panel: 0
          action: open
  - name: String formatting
    type: section
    transformations:
        - add:  |

             Try it out in the left pane. To compile and run the code, press the "Run!"
             {Run!}(sh .guides/bg.sh javac code/StringFormat.java java -cp code/ StringFormat )
  
         position: 601
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/StringFormat.java"
          panel: 0
          action: open
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 137
        position: 660
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 7
  - name: Arrays and references
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Creating arrays
    type: section
    #transformation to add visualizer goes here....
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/CreatingArrays.java"
            panel: 0
            action: open
  - name: Accessing elements
    type: section
    #transformation to add visualizer goes here....
    configuration:
      layout: 2-panels-guides-left
      files:
          - path: "#tabs"
            action: close
          - path: "code/AccessingElements.java"
            panel: 1
            action: open
  - name: Displaying arrays
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/DisplayingArrays.java"
            panel: 0
            action: open
  - name: Copying arrays
    type: section
        #transformation to add visualizer goes here....
    configuration:
      layout: 2-panels-guides-left
      files:
          - path: "#tabs"
            action: close
          - path: "code/CopyingArrays.java"
            panel: 1
            action: open
  - name: Array traversal
    type: section
        #transformation to add visualizer goes here....
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/TraversingArrays.java"
            panel: 0
            action: open
  - name: Random numbers
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/RandomNums.java"
            panel: 0
            action: open
  - name: Building a histogram
    type: section
    configuration:
      layout: 2-panels-guides-left
      files:
          - path: "#tabs"
            action: close
          - path: "code/Histogram.java"
            panel: 1
            action: open
  - name: The enhanced for loop
    type: section
        #transformation to add visualizer goes here....
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/Enhanced.java"
            panel: 0
            action: open
  - name: Counting characters
    type: section
        #transformation to add visualizer goes here....
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/Counting.java"
            panel: 0
            action: open
          - path: "code/Doubloon.java"
            panel: 1
            action: open
  - name: Vocabulary
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
       - remove: 142
         position: 760
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 8
  - name: Recursive methods
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Recursive void methods
    type: section
    transformations:
        - add: |

         {Run!}(sh .guides/bg.sh javac code/Countdown.java java -cp code/ Countdown )
  
          position: 31
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Countdown.java"
          panel: 0
          action: open
        - path: "#visualizer: code/Countdown.java"
          panel: 1
          action: open
  - name: Recursive stack diagrams
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Value returning methods
    type: section
    transformations:
        - add: |

          Follow along in the top-left pane.
          {Run!}(sh .guides/bg.sh javac code/ValueReturning.java java -cp code/ ValueReturning )
 
          position: 203
        - add: |

          {Run!}(sh .guides/bg.sh javac code/ValueReturning.java java -cp code/ ValueReturning 2 )
 
          position: 234
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/ValueReturning.java"
          panel: 0
          action: open
        - path: "#visualizer: code/ValueReturning.java"
          panel: 1
          action: open
  - name: The leap of faith
    type: section
    transformations:
        - add: |

          {Run!}(sh .guides/bg.sh javac code/Fibonacci.java java -cp code/ Fibonacci )
        
          position: 351
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Fibonacci.java"
          panel: 0
          action: open
        - path: "#visualizer: code/Fibonacci.java"
          panel: 1
          action: open
  - name: Binary number system
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Recursive binary method
    type: section
    transformations:
        - add: |

          {Run!}(sh .guides/bg.sh javac code/DisplayBinary.java java -cp code/ DisplayBinary )
        
          position: 492
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/DisplayBinary.java"
          panel: 0
          action: open
        - path: "#visualizer: code/DisplayBinary.java"
          panel: 1
          action: open
  - name: CodingBat problems
    type: section
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "#preview: https://codingbat.com/prob/p118230"
          panel: 0
          action: open
        - path: "#preview: https://codingbat.com/prob/p135988"
          panel: 1
          action: open
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 9
  - name: Immutable objects
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Primitives vs objects
    type: section
  - name: Strings are immutable
    type: section
  - name: Wrapper classes
    type: section
  - name: Command-line arguments
    type: section
  - name: BigInteger arithmetic
    type: section
  - name: Program development
    type: section
  - name: More generalization
    type: section
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 10
  - name: Mutable objects
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Point objects
    type: section
  - name: Objects as parameters
    type: section
  - name: Objects as return types
    type: section
  - name: Rectangles are mutable
    type: section
  - name: Aliasing revisited
    type: section
  - name: Java library source
    type: section
  - name: Class diagrams
    type: section
  - name: Garbage collection
    type: section
  - name: Mutable vs immutable
    type: section
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 11
  - name: Designing classes
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: The Time class
    type: section
  - name: Constructors
    type: section
  - name: More constructors
    type: section
  - name: Getters and setters
    type: section
  - name: Displaying objects
    type: section
  - name: The toString method
    type: section
  - name: The equals method
    type: section
  - name: Adding times
    type: section
  - name: Pure methods
    type: section
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 12
  - name: Arrays of objects
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Card objects
    type: section
  - name: Card toString
    type: section
  - name: Class variables
    type: section
  - name: The compareTo method
    type: section
  - name: Cards are immutable
    type: section
  - name: Arrays of cards
    type: section
  - name: Sequential search
    type: section
  - name: Binary search
    type: section
  - name: Tracing the code
    type: section
  - name: Recursive version
    type: section
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 13
  - name: Objects of arrays
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Decks of cards
    type: section
  - name: Shuffling decks
    type: section
  - name: Selection sort
    type: section
  - name: Merge sort
    type: section
  - name: Subdecks
    type: section
  - name: Merging decks
    type: section
  - name: Adding recursion
    type: section
  - name: Static context
    type: section
  - name: Piles of cards
    type: section
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Chapter 14
  - name: Extending classes
    type: chapter
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: CardCollection
    type: section
  - name: Inheritance
    type: section
  - name: Dealing cards
    type: section
  - name: The Player class
    type: section
  - name: The Eights class
    type: section
  - name: Class relationships
    type: section
  - name: Vocabulary
    type: section
    configuration:
        layout: 1-panel
        files:
            - path: "#tabs"
              action: close
  - name: Exercises
    type: section
    codio_section: start
    transformations:
      - remove: 
        position: 
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
#Appendix A
  - name: Tools
    type: chapter
  - name: Installing DrJava
    type: section
  - name: DrJava interactions
    type: section
  - name: Command-line interface
    type: section
  - name: Command-line testing
    type: section
  - name: Running Checkstyle
    type: section
  - name: Tracing with a debugger
    type: section
  - name: Testing with JUnit
    type: section
  - name: Vocabulary
    type: section
#Appendix B
  - name: Javadoc
    type: chapter
  - name: Reading documentation
    type: section
  - name: Writing documentation
    type: section
  - name: Javadoc tags
    type: section
  - name: Example source file
    type: section
  - name: Vocabulary
    type: section
#Appendix C
  - name: Graphics
    type: chapter
  - name: Creating graphics
    type: section
  - name: Graphics methods
    type: section
  - name: Example drawing
    type: section
  - name: Vocabulary
    type: section
  - name: Exercises
    type: section
#Appendix D
  - name: Debugging
    type: chapter
  - name: Compile-time errors
    type: section
  - name: Run-time errors
    type: section
  - name: Logic errors
    type: section
#Appendix E
  - name: Extras
    type: chapter
  - name: Unreachable code
    type: section
  - name: Method composition
    type: section
  - name: Overloading methods
    type: section
  - name: Generating tables
    type: section
  - name: The do-while loop
    type: section
  - name: Break and continue
    type: section
#inserting exercises on seperate pages so that they are cherry-pick-able
insert_sections:
#Chapter 1
  - name: Exercises 1.1
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex1.1
      Computer scientists have the annoying habit of using common English words to mean something other than their common English meaning.
      For example, in English, statements and comments are the same thing, but in programs they are different.
      \begin{enumerate}
      \item In computer jargon, what's the difference between a statement and a comment?
      \item What does it mean to say that a program is portable?
      \item In common English, what does the word compile mean?
      \item What is an executable? Why is that word used as a noun?
      \end{enumerate}
      The glossary at the end of each chapter is intended to highlight words and phrases that have special meanings in computer science.
      When you see familiar words, don't assume that you know what they mean!
      \end{exercise}
  - name: Exercises 1.2
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex1.2
      Before you do anything else, find out how to compile and run a Java program.
      Some environments provide sample programs similar to the example in Section~\ref{hello}.
      \begin{enumerate}
      \item Type in the hello world program, then compile and run it.
      \item Add a print statement that displays a second message after the ``Hello, World!''.
      Say something witty like, ``How are you?''
      Compile and run the program again.
      \item Add a comment to the program (anywhere), recompile, and run it again.
      The new comment should not affect the result.
      \end{enumerate}
      This exercise may seem trivial, but it is the starting place for many of the programs we will work with.
      To debug with confidence, you will need to have confidence in your programming environment.
      In some environments, it is easy to lose track of which program is executing.
      You might find yourself trying to debug one program while you are accidentally running another.
      Adding (and changing) print statements is a simple way to be sure that the program you are looking at is the program you are running.
      \end{exercise}
  - name: Exercises 1.3
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex1.3
      It is a good idea to commit as many errors as you can think of, so that you see what error messages the compiler produces.
      Sometimes the compiler tells you exactly what is wrong, and all you have to do is fix it.
      But sometimes the error messages are misleading.
      Over time you will develop a sense for when you can trust the compiler and when you have to figure things out yourself.
      Starting with the hello world program, try out each of the following errors.
      After you make each change, compile the program, read the error message (if there is one), and then fix the error.
      \begin{enumerate}
      \item Remove one of the open curly braces.
      \item Remove one of the close curly braces.
      \item Instead of \java{main}, write \java{mian}.
      \item Remove the word \java{static}.
      \item Remove the word \java{public}.
      \item Remove the word \java{System}.
      \item Replace \java{println} with \java{Println}.
      \item Replace \java{println} with \java{print}.
      \item Delete one of the parentheses.
      \item Add an extra parenthesis.
      \end{enumerate}
      \end{exercise}
#Chapter 2
  - name: Exercises 2.1
    type: section
    chapter: Variables and operators
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex2.1

      If you are using this book in a class, you might enjoy this exercise.
      Find a partner and play ``Stump the Chump'':

      Start with a program that compiles and runs correctly.
      One player looks away while the other player adds an error to the program.
      Then the first player tries to find and fix the error.
      You get two points if you find the error without compiling the program, one point if you find it using the compiler, and your opponent gets a point if you don't find it.

      \end{exercise}
  - name: Exercises 2.2
    type: section
    chapter: Variables and operators
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex2.2
      \label{ex:date}

      The point of this exercise is (1) to use string concatenation to display values with different types (\java{int} and \java{String}), and (2) to practice developing programs gradually by adding a few statements at a time.

      \begin{enumerate}

      \item Create a new program named {\tt Date.java}.
      Copy or type in something like the hello world program and make sure you can compile and run it.

      \item Following the example in Section~\ref{sec:printvar}, write a program that creates variables named \java{day}, \java{date}, \java{month}, and \java{year}.
      The variable \java{day} will contain the day of the week (like Friday), and \java{date} will contain the day of the month (like the 13th).
      %What type is each variable?
      Assign values to those variables that represent today's date.

      \item Display the value of each variable on a line by itself.
      This is an intermediate step that is useful for checking that everything is working so far.
      Compile and run your program before moving on.

      \item Modify the program so that it displays the date in standard American format, for example: {\tt Thursday, July 16, 2015}.

      \item Modify the program so it also displays the date in European format.
      The final output should be:

      \begin{stdout}
      American format:
      Thursday, July 16, 2015
      European format:
      Thursday 16 July 2015
      \end{stdout}

      %{\it Hint:} You should be able to copy, paste, and modify the code from Step 4 when completing Step 5.
      \end{enumerate}

      \end{exercise}
  - name: Exercises 2.3
    type: section
    chapter: Variables and operators
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex2.3

      The point of this exercise is to (1) use some of the arithmetic operators, and (2) start thinking about compound entities (like time of day) that are represented with multiple values.

      \begin{enumerate}

      \item Create a new program called {\tt Time.java}.
      From now on, we won't remind you to start with a small, working program, but you should.

      \item Following the example program in Section~\ref{sec:printvar}, create variables named \java{hour}, \java{minute}, and \java{second}.
      Assign values that are roughly the current time.
      Use a 24-hour clock so that at 2pm the value of \java{hour} is 14.

      \item Make the program calculate and display the number of seconds since midnight.

      \item Calculate and display the number of seconds remaining in the day.

      \item Calculate and display the percentage of the day that has passed.
      You might run into problems when computing percentages with integers, so consider using floating-point.

      \item Change the values of \java{hour}, \java{minute}, and \java{second} to reflect the current time.
      Then write code to compute the elapsed time since you started working on this exercise.

      \end{enumerate}

      {\it Hint:} You might want to use additional variables to hold values during the computation.
      Variables that are used in a computation but never displayed are sometimes called ``intermediate'' or ``temporary'' variables.

      \end{exercise}
#Chapter 3
  - name: Exercises 3.1
    type: section
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.1

      When you use \java{printf}, the Java compiler does not check your format string.
      See what happens if you try to display a value with type \java{int} using \java{\%f}.
      And what happens if you display a \java{double} using \java{\%d}?
      What if you use two format specifiers, but then only provide one value?

      \end{exercise}
  - name: Exercises 3.2
    type: section
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.2

      Write a program that converts a temperature from Celsius to Fahrenheit.
      It should (1) prompt the user for input, (2) read a \java{double} value from the keyboard, (3) calculate the result, and (4) format the output to one decimal place.
      For example, it should display {\tt "24.0 C = 75.2 F"}.

      Here is the formula.
      Be careful not to use integer division!
      %
      \[ F = C \times \frac{9}{5} + 32 \]

      \end{exercise}
  - name: Exercises 3.3
    type: section
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.3

      Write a program that converts a total number of seconds to hours, minutes, and seconds.
      It should (1) prompt the user for input, (2) read an integer from the keyboard, (3) calculate the result, and (4) use \java{printf} to display the output.
      For example, {\tt "5000 seconds = 1 hours, 23 minutes, and 20 seconds"}.

      {\it Hint:} Use the remainder operator.

      \end{exercise}
  - name: Exercises 3.4
    type: section
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.4
      \label{guess}

      The goal of this exercise is to program a ``Guess My Number'' game.
      When it's finished, it will work like this:

      \begin{stdout}
      I'm thinking of a number between 1 and 100
      (including both). Can you guess what it is?
      Type a number: 45
      Your guess is: 45
      The number I was thinking of is: 14
      You were off by: 31
      \end{stdout}

      To choose a random number, you can use the \java{Random} class in \java{java.util}.
      Here's how it works:

      \index{GuessStarter.java}

      \begin{trinket}{GuessStarter.java}
      import java.util.Random;

      public class GuessStarter {

          public static void main(String[] args) {
              // pick a random number
              Random random = new Random();
              int number = random.nextInt(100) + 1;
              System.out.println(number);
          }
      }
      \end{trinket}

      \index{new}
      \index{operator!new}

      Like the \java{Scanner} class we saw in this chapter, \java{Random} has to be imported before we can use it.
      And as we saw with \java{Scanner}, we have to use the \java{new} operator to create a \java{Random} (number generator).

      Then we can use the method \java{nextInt} to generate a random number.
      In this example, the result of \java{nextInt(100)} will be between 0 and 99, including both.
      Adding 1 yields a number between 1 and 100, including both.

      \begin{enumerate}

      \item The definition of \java{GuessStarter} is in a file called {\tt GuessStarter.java}, in the directory called {\tt ch03}, in the repository for this book.
      %Instructions for downloading this code are on page~\pageref{code}.

      \item Compile and run this program.

      \item Modify the program to prompt the user, then use a \java{Scanner} to read a line of user input.
      Compile and test the program.

      \item Read the user input as an integer and display the result.
      Again, compile and test.

      \item Compute and display the difference between the user's guess and the number that was generated.

      \end{enumerate}

      \end{exercise}
#Chapter 4
  - name: Exercises 4.1
    type: section
    chapter: Methods and testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex4.3

      The purpose of this exercise is to take code from a previous exercise and redesign it as a method that takes parameters.
      You should start with a working solution to Exercise~\ref{ex:date}.

      \begin{enumerate}

      \item Write a method called \java{printAmerican} that takes the day, date, month and year as parameters and that displays them in American format.

      \item Test your method by invoking it from \java{main} and passing appropriate arguments.
      The output should look something like this (except that the date might be different):

      \begin{stdout}
      Saturday, July 22, 2015
      \end{stdout}

      \item Once you have debugged \java{printAmerican}, write another method called \java{printEuropean} that displays the date in European format.

      \end{enumerate}

      \end{exercise}
  - name: Exercises 4.2
    type: section
    chapter: Methods and testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex5.6

      This exercise reviews the flow of execution through a program with multiple methods.
      Read the following code and answer the questions.

      \begin{code}
      public static void main(String[] args) {
          zippo("rattle", 13);
      }
      \end{code}

      \begin{code}
      public static void baffle(String blimp) {
          System.out.println(blimp);
          zippo("ping", -5);
      }
      \end{code}

      \begin{code}
      public static void zippo(String quince, int flag) {
          if (flag < 0) {
              System.out.println(quince + " zoop");
          } else {
              System.out.println("ik");
              baffle(quince);
              System.out.println("boo-wa-ha-ha");
          }
      }
      \end{code}

      \begin{enumerate}

      \item Write the number {\tt 1} next to the first line of code in this program that will execute.

      \item Write the number {\tt 2} next to the second line of code, and so on until the end of the program.
      If a line is executed more than once, it might end up with more than one number next to it.

      \item What is the value of the parameter \java{blimp} when \java{baffle} gets invoked?

      \item What is the output of this program?

      \end{enumerate}

      \end{exercise}
  - name: Exercises 4.3
    type: section
    chapter: Methods and testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex4.1

      %The point of this exercise is to practice reading code and to make sure that you understand the flow of execution through a program with multiple methods.
      Answer the following questions without running the program on a computer.

      \begin{enumerate}

      \item Draw a stack diagram that shows the state of the program the first time \java{ping} is invoked.

      \item What is output by the following program?
      Be precise about where there are spaces and where there are newlines.

      %{\it Hint:} Start by describing in words what \java{ping} and \java{baffle} output.

      %\item What happens if you invoke \java{baffle();} at the end of the \java{ping} method? (We will see why in Section~\ref{recursion}.)

      \end{enumerate}

      \begin{code}
      public static void zoop() {
          baffle();
          System.out.print("You wugga ");
          baffle();
      }
      \end{code}

      \begin{code}
      public static void main(String[] args) {
          System.out.print("No, I ");
          zoop();
          System.out.print("I ");
          baffle();
      }
      \end{code}

      \begin{code}
      public static void baffle() {
          System.out.print("wug");
          ping();
      }
      \end{code}

      \begin{code}
      public static void ping() {
          System.out.println(".");
      }
      \end{code}

      \end{exercise}
  - name: Exercises 4.4
    type: section
    chapter: Methods and testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex6.1

      If you have a question about whether something is legal, and what happens if it is not, a good way to find out is to ask the compiler.
      Answer the following questions by trying them out.

      \begin{enumerate}

      \item What happens if you invoke a value method and don't do anything with the result; that is, if you don't assign it to a variable or use it as part of a larger expression?

      \item What happens if you use a void method as part of an expression?
      For example, try \java{System.out.println("boo!") + 7;}

      \end{enumerate}

      \end{exercise}
  - name: Exercises 4.5
    type: section
    chapter: Methods and testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex5.2

      Draw a stack diagram that shows the state of the program the {\it second} time \java{zoop} is invoked.
      What is the complete output?

      \begin{code}
      public static void zoop(String fred, int bob) {
          System.out.println(fred);
          if (bob == 5) {
              ping("not ");
          } else {
              System.out.println("!");
          }
      }
      \end{code}

      \begin{code}
      public static void main(String[] args) {
          int bizz = 5;
          int buzz = 2;
          zoop("just for", bizz);
          clink(2 * buzz);
      }
      \end{code}

      \begin{code}
      public static void clink(int fork) {
          System.out.print("It's ");
          zoop("breakfast ", fork);
      }
      \end{code}

      \begin{code}
      public static void ping(String strangStrung) {
          System.out.println("any " + strangStrung + "more ");
      }
      \end{code}

      \end{exercise}
  - name: Exercises 4.6
    type: section
    chapter: Methods and testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex6.4

      Many computations can be expressed more concisely using the ``multadd'' operation, which takes three operands and computes \java{a * b + c}.
      Some processors even provide a hardware implementation of this operation for floating-point numbers.

      \begin{enumerate}

      \item Create a new program called {\tt Multadd.java}.

      \item Write a method called \java{multadd} that takes three \java{doubles} as parameters and that returns \java{a * b + c}.

      \item Write a \java{main} method that tests \java{multadd} by invoking it with a few simple parameters, like \java{1.0, 2.0, 3.0}.

      \item Also in \java{main}, use \java{multadd} to compute the following values:
      %
      \begin{eqnarray*}
      & \sin \frac{\pi}{4} + \frac{\cos \frac{\pi}{4}}{2} & \\
      & \log 10 + \log 20 &
      \end{eqnarray*}

      \item Write a method called \java{expSum} that takes a double as a parameter and that uses \java{multadd} to calculate:
      %
      \begin{eqnarray*}
      x e^{-x} + \sqrt{1 - e^{-x}}
      \end{eqnarray*}
      %
      {\it Hint:} The method for raising $e$ to a power is \java{Math.exp}.

      \end{enumerate}

      In the last part of this exercise, you need to write a method that invokes another method you wrote.
      Whenever you do that, it is a good idea to test the first method carefully before working on the second.
      Otherwise, you might find yourself debugging two methods at the same time, which can be difficult.

      One of the purposes of this exercise is to practice pattern-matching: the ability to recognize a specific problem as an instance of a general category of problems.

      \end{exercise}

#Chapter 5
  - name: Exercises 5.1
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6.5 NEW

      Using the following variables, evaluate the logic expressions in the table below.
      Write your answers as true, false, or error.

      \begin{code}
      boolean yes = true;
      boolean no = false;
      int loVal = -999;
      int hiVal = 999;
      double grade = 87.5;
      double amount = 50.0;
      String hello = "world";
      \end{code}

      \vspace{1ex}

      \begin{center}
      \begin{tabular}{|l|l|}
      \hline
      Expression & Result \\
      \hline
      \hline
      \java{yes == no || grade > amount} & \hspace{5em} \\
      \hline
      \java{amount == 40.0 || 50.0} &  \\
      \hline
      \java{hiVal != loVal || loVal < 0} &  \\
      \hline
      \java{True || hello.length() > 0} &  \\
      \hline
      \java{hello.isEmpty() && yes} &  \\
      \hline
      \java{grade <= 100 && !false} &  \\
      \hline
      \java{!yes || no} &  \\
      \hline
      \java{grade > 75 > amount} &  \\
      \hline
      \java{amount <= hiVal && amount >= loVal} &  \\
      \hline
      \java{no && !no || yes && !yes} &  \\
      \hline
      \end{tabular}
      \end{center}

      \end{exercise}
  - name: Exercises 5.2
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex6.5

      What is the output of the following program?
      Determine the answer without using a computer.

      \begin{code}
      public static void main(String[] args) {
          boolean flag1 = isHoopy(202);
          boolean flag2 = isFrabjuous(202);
          System.out.println(flag1);
          System.out.println(flag2);
          if (flag1 && flag2) {
              System.out.println("ping!");
          }
          if (flag1 || flag2) {
              System.out.println("pong!");
          }
      }
      \end{code}

      \begin{code}
      public static boolean isHoopy(int x) {
          boolean hoopyFlag;
          if (x % 2 == 0) {
              hoopyFlag = true;
          } else {
              hoopyFlag = false;
          }
          return hoopyFlag;
      }
      \end{code}

      \begin{code}
      public static boolean isFrabjuous(int x) {
          boolean frabjuousFlag;
          if (x > 0) {
              frabjuousFlag = true;
          } else {
              frabjuousFlag = false;
          }
          return frabjuousFlag;
      }
      \end{code}

      The purpose of this exercise is to make sure you understand logical operators and the flow of execution through methods.

      \end{exercise}
  - name: Exercises 5.3
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex5.1

      Rewrite the following code using a single \java{if} statement.

      \begin{code}
      if (x > 0) {
          if (x < 10) {
              System.out.println("positive single digit number.");
          }
      }
      \end{code}

      \end{exercise}
    - name: Exercises 5.4
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex5.4

      Fermat's Last Theorem says that there are no integers $a$, $b$, and $c$ such that $a^n + b^n = c^n$, except when $n \leq 2$.

      Write a program named \java{Fermat.java} that inputs four integers (\java{a}, \java{b}, \java{c}, and \java{n}) and checks to see if Fermat's theorem holds.
      If $n$ is greater than 2 and $a^n + b^n = c^n$, the program should display ``Holy smokes, Fermat was wrong!''
      Otherwise the program should display ``No, that doesn't work.''

      {\it Hint:} You may want to use \java{Math.pow}.

      \end{exercise}
  - name: Exercises 5.5
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex5.7

      Now that we have conditional statements, we can get back to the ``Guess My Number'' game from Exercise~\ref{guess}.

      You should already have a program that chooses a random number, prompts the user to guess it, and displays the difference between the guess and the chosen number.

      Adding a small amount of code at a time, and testing as you go, modify the program so it tells the user whether the guess is too high or too low, and then prompts the user for another guess.

      The program should continue until the user gets it right or guesses incorrectly three times.
      If the user guesses the correct number, display a message and terminate the program.

      \end{exercise}
  - name: Exercises 5.6
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6.5 NEW

      Write a program named \java{Quadratic.java} that finds the roots of $ax^2 + bx + c = 0$ using the quadratic formula:
      $$ x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$
      Prompt the user to input integers for $a$, $b$, and $c$.
      Compute the two solutions for $x$, and display the results.

      Your program should be able to handle inputs for which there is only one or no solution.
      Specifically, it should not divide by zero or take the square root of a negative number.

      Be sure to validate all inputs.
      The user should never see an input mismatch exception.
      Display specific error messages that include the invalid input.

      \end{exercise}
  - name: Exercises 5.7
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex6.3

      If you are given three sticks, you may or may not be able to arrange them in a triangle.
      For example, if one of the sticks is 12 inches long and the other two are one inch long, you will not be able to get the short sticks to meet in the middle.
      For any three lengths, there is a simple test to see if it is possible to form a triangle:

      \begin{quotation}
      \noindent
      If any of the three lengths is greater than the sum of the other two, you cannot form a triangle.
      \end{quotation}

      Write a program named \java{Triangle.java} that inputs three integers, and then outputs whether you can (or cannot) form a triangle from the given lengths.
      %The point of this exercise is to use conditional statements to write a value method.
      Reuse your code from the previous exercise to validate the inputs.
      Display an error if any of the lengths are negative or zero.

      \end{exercise}
      
#Chapter 6 
  - name: Exercises 6.1
    type: section
    chapter: Loops and strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex7.1

      Consider the following methods:

      \begin{code}
      public static void main(String[] args) {
          loop(10);
      }

      public static void loop(int n) {
          int i = n;
          while (i > 1) {
              System.out.println(i);
              if (i % 2 == 0) {
                  i = i / 2;
              } else {
                  i = i + 1;
              }
          }
      }
      \end{code}

      \begin{enumerate}

      \item Draw a table that shows the value of the variables \java{i} and \java{n} during the execution of \java{loop}.
      The table should contain one column for each variable and one line for each iteration.

      \item What is the output of this program?

      \item Can you prove that this loop terminates for any positive value of \java{n}?

      % If i is odd and we increment by 1, the result is even.  So the second
      % branch is always followed by the first branch.
      % If i is even and we divide by 2, the result might be odd.  So in the
      % worst case, we might alternate between the branches.
      % But we can't do more of the second branch than the first.
      % So we divide at least as often as we add.

      % If i is 1, we're done.
      % If i is 2, we divide by 2 and we're done.
      % If i is greater than 2, the first branch decreases more than the
      % second branch increases.
      % So if we do one of each, the net effect is a decrease.
      % Therefore, the value of i has to decrease after any two steps.

      \end{enumerate}

      \end{exercise}
  - name: Exercises 6.2
    type: section
    chapter: Loops and strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex7.2

      Let's say you are given a number, $a$, and you want to find its square root.
      One way to do that is to start with a rough guess about the answer, $x_0$, and then improve the guess using this formula:
      %
      \[ x_1 =(x_0 + a/x_0) / 2 \]
      %
      For example, if we want to find the square root of 9, and we start with $x_0 = 6$, then $x_1 = (6 + 9/6) / 2 = 3.75$, which is closer.
      We can repeat the procedure, using $x_1$ to calculate $x_2$, and so on.
      In this case, $x_2 = 3.075$ and $x_3 = 3.00091$.
      So it converges quickly on the correct answer.

      Write a method called \java{squareRoot} that takes a \java{double} and returns an approximation of the square root of the parameter, using this technique.
      You should not use \java{Math.sqrt}.

      As your initial guess, you should use $a/2$.
      Your method should iterate until it gets two consecutive estimates that differ by less than 0.0001.
      %In other words, return when the absolute value of $x_n - x_{n-1}$ is less than 0.0001.
      You can use \java{Math.abs} to calculate the absolute value of the difference.

      \end{exercise}
  - name: Exercises 6.3
    type: section
    chapter: Loops and strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex7.6

      One way to evaluate $\exp(-x^2)$ is to use the infinite series expansion:
      %
      \[ \exp(-x^2) = 1 - x^2 + x^4/2 - x^6/6 + \ldots \]
      %
      The $i$th term in this series is $(-1)^i x^{2i} / i!$.
      Write a method named \java{gauss} that takes \java{x} and \java{n} as arguments and returns the sum of the first \java{n} terms of the series.
      You should not use \java{factorial} or \java{pow}.

      \end{exercise}
  - name: Exercises 6.4
    type: section
    chapter: Loops and strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex9.5

      \index{abecedarian}

      A word is said to be ``abecedarian'' if the letters in the word appear in alphabetical order.
      For example, the following are all six-letter English abecedarian words:

      \begin{quote}
      abdest, acknow, acorsy, adempt, adipsy, agnosy, befist, behint, %\\
      beknow, bijoux, biopsy, cestuy, chintz, deflux, dehors, dehort, %\\
      deinos, diluvy, dimpsy %\\
      \end{quote}

      Write a method called \java{isAbecedarian} that takes a \java{String} and returns a \java{boolean} indicating whether the word is abecedarian.
      %Your method can be iterative or recursive.

      \end{exercise}
  - name: Exercises 6.5
    type: section
    chapter: Loops and strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex9.6
      \label{doubloon}

      \index{doubloon}

      A word is said to be a ``doubloon'' if every letter that appears in the word appears exactly twice.
      Here are some example doubloons found in the dictionary:

      \begin{quote}
      Abba, Anna, appall, appearer, appeases, arraigning, beriberi, bilabial, boob, Caucasus, coco, Dada, deed, Emmett, Hannah, horseshoer, intestines, Isis, mama, Mimi, murmur, noon, Otto, papa, peep, reappear, redder, sees, Shanghaiings, Toto
      \end{quote}

      Write a method called \java{isDoubloon} that takes a string and checks whether it is a doubloon.
      To ignore case, invoke the \java{toLowerCase} method before checking.
      \end{exercise}
  - name: Exercises 6.6
    type: section
    chapter: Loops and strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex9.8

      \index{Scrabble}

      In Scrabble\footnote{Scrabble is a registered trademark owned in the USA and Canada by Hasbro Inc., and in the rest of the world by J.\ W.\ Spear \& Sons Limited of Maidenhead, Berkshire, England, a subsidiary of Mattel Inc.} each player has a set of tiles with letters on them.
      The object of the game is to use those letters to spell words.
      The scoring system is complex, but longer words are usually worth more than shorter words.

      Imagine you are given your set of tiles as a string, like \java{"quijibo"}, and you are given another string to test, like \java{"jib"}.

      Write a method called \java{canSpell} that takes two strings and checks whether the set of tiles can spell the word.
      You might have more than one tile with the same letter, but you can only use each tile once.

      \end{exercise}

#Chapter 7
  - name: Exercises 7.1
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex8.2
      
      The purpose of this exercise is to practice reading code and recognizing the traversal patterns in this chapter.
      The following methods are hard to read, because instead of using meaningful names for the variables and methods, they use names of fruit.

      For each method, write one sentence that describes what the method does, without getting into the details of how it works.
      And for each variable, identify the role it plays.

      \begin{code}
      public static int banana(int[] a) {
          int kiwi = 1;
          int i = 0;
          while (i < a.length) {
              kiwi = kiwi * a[i];
              i++;
          }
          return kiwi;
      }
      \end{code}

      \begin{code}
      public static int grapefruit(int[] a, int grape) {
          for (int i = 0; i < a.length; i++) {
              if (a[i] == grape) {
                  return i;
              }
          }
          return -1;
      }
      \end{code}

      \begin{code}
      public static int pineapple(int[] a, int apple) {
          int pear = 0;
          for (int pine: a) {
              if (pine == apple) {
                  pear++;
              }
          }
          return pear;
      }
      \end{code}

      \end{exercise}
  - name: Exercises 7.2
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex8.3

      What is the output of the following program?
      Describe in a few words what \java{mus} does.
      Draw a stack diagram just before \java{mus} returns.
      %that shows the state of the program

      \begin{code}
      public static int[] make(int n) {
          int[] a = new int[n];
          for (int i = 0; i < n; i++) {
              a[i] = i + 1;
          }
          return a;
      }
      \end{code}

      \begin{code}
      public static void dub(int[] jub) {
          for (int i = 0; i < jub.length; i++) {
              jub[i] *= 2;
          }
      }
      \end{code}

      \begin{code}
      public static int mus(int[] zoo) {
          int fus = 0;
          for (int i = 0; i < zoo.length; i++) {
              fus += zoo[i];
          }
          return fus;
      }
      \end{code}

      \begin{code}
      public static void main(String[] args) {
          int[] bob = make(5);
          dub(bob);
          System.out.println(mus(bob));
      }
      \end{code}

      \end{exercise}
  - name: Exercises 7.3
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex8.4

      Write a method called \java{indexOfMax} that takes an array of integers and returns the index of the largest element.
      Can you write this method using an enhanced \java{for} loop?
      Why or why not?

      \end{exercise}
  - name: Exercises 7.4
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex8.5

      The Sieve of Eratosthenes is ``a simple, ancient algorithm for finding all prime numbers up to any given limit,'' which you can read about at \url{https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes}.

      Write a method called \java{sieve} that takes an integer parameter, \java{n}, and returns a \java{boolean} array that indicates, for each number from \java{0} to \java{n - 1}, whether the number is prime.

      \end{exercise}
  - name: Exercises 7.5
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex8.6

      Write a method named \java{areFactors} that takes an integer \java{n} and an array of integers, and that returns \java{true} if the numbers in the array are all factors of \java{n} (which is to say that \java{n} is divisible by all of them).

      \end{exercise}
  - name: Exercises 7.6
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex8.7

      Write a method named \java{arePrimeFactors} that takes an integer \java{n} and an array of integers, and that returns \java{true} if the numbers in the array are all prime {\it and} their product is \java{n}.

      \end{exercise}
  - name: Exercises 7.7
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex9.2

      Write a method called \java{letterHist} that takes a string as a parameter and returns a histogram of the letters in the string.
      The zeroth element of the histogram should contain the number of a's in the string (upper- and lowercase); the 25th element should contain the number of z's.
      Your solution should only traverse the string once.

      \end{exercise}
  - name: Exercises 7.8
    type: section
    chapter: Arrays and references
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex9.7

      \index{anagram}

      Two words are anagrams if they contain the same letters and the same number of each letter.
      For example, ``stop'' is an anagram of ``pots'' and ``allen downey'' is an anagram of ``well annoyed''.
      Write a method that takes two strings and checks whether they are anagrams of each other.

      \end{exercise}

#Chapter 8

#Chapter 9

#Chapter 10 

#Chapter 11

#Chapter 12

#Chapter 13

#Chapter 14 

      